generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex", "fullTextSearch"]
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_URL")
  relationMode = "prisma"
}

model Account {
  id                       String  @id(map: "idx_28903_PRIMARY") @default(cuid()) @db.VarChar(191)
  userId                   String  @unique(map: "idx_28903_Account_userId_key") @db.VarChar(191)
  type                     String  @db.VarChar(191)
  provider                 String  @db.VarChar(191)
  providerAccountId        String  @db.VarChar(191)
  refresh_token            String? @db.VarChar(2000)
  refresh_token_expires_in Int?
  access_token             String? @db.VarChar(2000)
  expires_at               Int?
  token_type               String? @db.VarChar(191)
  scope                    String? @db.VarChar(191)
  id_token                 String? @db.VarChar(2000)
  session_state            String? @db.VarChar(2000)
  oauth_token_secret       String? @db.VarChar(2000)
  oauth_token              String? @db.VarChar(2000)
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId], map: "idx_28903_Account_provider_providerAccountId_key")
  @@index([userId], map: "idx_28903_Account_userId_idx")
}

model Session {
  id           String   @id(map: "idx_28928_PRIMARY") @default(cuid()) @db.VarChar(191)
  sessionToken String   @unique(map: "idx_28928_Session_sessionToken_key") @db.VarChar(191)
  userId       String   @db.VarChar(191)
  expires      DateTime @db.Timestamptz(6)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "idx_28928_Session_userId_idx")
}

model User {
  id               String           @id(map: "idx_28936_PRIMARY") @default(cuid()) @db.VarChar(191)
  name             String?          @db.VarChar(191)
  email            String?          @unique(map: "idx_28936_User_email_key") @db.VarChar(191)
  emailVerified    DateTime?        @db.Timestamptz(6)
  image            String?          @db.VarChar(191)
  resident         Boolean
  sessions         Session[]
  Account          Account?
  userPreferences  UserPreference[]
  decisions        Decision[]
  programWatchList Program[]        @relation("ProgramWatchList")
}

/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model College {
  id        Int        @id(map: "idx_28909_PRIMARY") @default(autoincrement())
  name      String     @db.VarChar(191)
  url       String?    @db.VarChar(191)
  programs  Program[]
  decisions Decision[]
}

/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model Program {
  id         Int                @id(map: "idx_28921_PRIMARY") @default(autoincrement())
  collegeId  Int
  name       String             @db.VarChar(191)
  degreeType Program_degreeType
  department String?            @db.VarChar(191)
  url        String?            @db.VarChar(191)
  verified   Boolean            @default(false)
  college    College            @relation(fields: [collegeId], references: [id])
  decisions  Decision[]
  watchers   User[]             @relation("ProgramWatchList")

  @@index([collegeId, degreeType], map: "idx_28921_Program_collegeId_degreeType_idx")
}

model Decision {
  id             String              @id(map: "idx_28913_PRIMARY") @default(cuid()) @db.VarChar(191)
  userId         String              @db.VarChar(191)
  programId      Int
  status         Decision_status
  date           DateTime            @default(now()) @db.Timestamptz(6)
  verificationId String              @unique(map: "idx_28913_Decision_verificationId_key") @db.VarChar(191)
  collegeId      Int
  statsId        String              @unique(map: "idx_28913_Decision_statsId_key") @db.VarChar(191)
  term           Decision_term
  termYearString String              @db.VarChar(191)
  visibility     Decision_visibility @default(VISIBLE)
  college        College             @relation(fields: [collegeId], references: [id])
  user           User?               @relation(fields: [userId], references: [id])
  program        Program             @relation(fields: [programId], references: [id])
  stats          Stats               @relation(fields: [statsId], references: [id])
  verification   Verification        @relation(fields: [verificationId], references: [id])

  @@index([userId, collegeId, programId, statsId, verificationId], map: "idx_28913_Decision_userId_collegeId_programId_statsId_verificat")
}

model Verification {
  id       String    @id(map: "idx_28948_PRIMARY") @default(cuid()) @db.VarChar(191)
  verified Boolean
  imgUrl   String?   @db.VarChar(191)
  decision Decision?
}

model UserPreference {
  id              Int    @id(map: "idx_28942_PRIMARY") @default(autoincrement())
  userId          String @db.VarChar(191)
  preferenceType  String @db.VarChar(191)
  preferenceValue String @db.VarChar(191)
  user            User   @relation(fields: [userId], references: [id])

  @@index([userId], map: "idx_28942_UserPreference_userId_idx")
}

model Stats {
  id         String            @id(map: "idx_28933_PRIMARY") @default(cuid()) @db.VarChar(191)
  gpa        Float?
  degreeType Stats_degreeType?
  residency  Stats_residency?
  decision   Decision?
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ProgramWatchList {
  A Int
  B String @db.VarChar(191)

  @@unique([A, B], map: "idx_28951__ProgramWatchList_AB_unique")
  @@index([B], map: "idx_28951__ProgramWatchList_B_index")
  @@map("_ProgramWatchList")
}

enum Decision_status {
  WAITLISTED
  INTERVIEW
  ACCEPTED
  REJECTED
}

enum Decision_term {
  FALL
  WINTER
  SPRING
  SUMMER
}

enum Decision_visibility {
  HIDDEN
  DRAFT
  VISIBLE
  NEEDS_REVIEW
  DELETED
}

enum Program_degreeType {
  BA
  BS
  BFA
  MA
  MS
  MBA
  MFA
  PhD
  MD
  JD
  EdD
  DDS
  DVM
  LLB
  LLM
  PsyD
}

enum Stats_degreeType {
  BA
  BS
  BFA
  MA
  MS
  MBA
  MFA
  PhD
  MD
  JD
  EdD
  DDS
  DVM
  LLB
  LLM
  PsyD
}

enum Stats_residency {
  AMERICAN
  INTERNATIONAL
}
